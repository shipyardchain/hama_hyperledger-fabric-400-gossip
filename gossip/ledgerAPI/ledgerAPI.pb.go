// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ledgerAPI.proto

package ledgerAPI

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlockRequest struct {
	BlockId              string   `protobuf:"bytes,1,opt,name=blockId,proto3" json:"blockId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9db3594e019751a, []int{0}
}

func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

type BlockReply struct {
	BlockBody            string   `protobuf:"bytes,1,opt,name=blockBody,proto3" json:"blockBody,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockReply) Reset()         { *m = BlockReply{} }
func (m *BlockReply) String() string { return proto.CompactTextString(m) }
func (*BlockReply) ProtoMessage()    {}
func (*BlockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9db3594e019751a, []int{1}
}

func (m *BlockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockReply.Unmarshal(m, b)
}
func (m *BlockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockReply.Marshal(b, m, deterministic)
}
func (m *BlockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockReply.Merge(m, src)
}
func (m *BlockReply) XXX_Size() int {
	return xxx_messageInfo_BlockReply.Size(m)
}
func (m *BlockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockReply.DiscardUnknown(m)
}

var xxx_messageInfo_BlockReply proto.InternalMessageInfo

func (m *BlockReply) GetBlockBody() string {
	if m != nil {
		return m.BlockBody
	}
	return ""
}

func init() {
	proto.RegisterType((*BlockRequest)(nil), "ledgerAPI.BlockRequest")
	proto.RegisterType((*BlockReply)(nil), "ledgerAPI.BlockReply")
}

func init() { proto.RegisterFile("ledgerAPI.proto", fileDescriptor_a9db3594e019751a) }

var fileDescriptor_a9db3594e019751a = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x49, 0x4d, 0x49,
	0x4f, 0x2d, 0x72, 0x0c, 0xf0, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x69, 0x70, 0xf1, 0x38, 0xe5, 0xe4, 0x27, 0x67, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0x49, 0x70, 0xb1, 0x27, 0x81, 0xf8, 0x9e, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30,
	0xae, 0x92, 0x16, 0x17, 0x17, 0x54, 0x65, 0x41, 0x4e, 0xa5, 0x90, 0x0c, 0x17, 0x27, 0x58, 0xc2,
	0x29, 0x3f, 0xa5, 0x12, 0xaa, 0x12, 0x21, 0x60, 0xe4, 0xca, 0xc5, 0x0a, 0x56, 0x2b, 0x64, 0xc3,
	0xc5, 0x91, 0x9e, 0x5a, 0x02, 0x61, 0x8b, 0xeb, 0x21, 0xdc, 0x81, 0x6c, 0xa7, 0x94, 0x28, 0xa6,
	0x44, 0x41, 0x4e, 0xa5, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0xb9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x30, 0x35, 0xfc, 0xc1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockClient interface {
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockReply, error)
}

type blockClient struct {
	cc *grpc.ClientConn
}

func NewBlockClient(cc *grpc.ClientConn) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockReply, error) {
	out := new(BlockReply)
	err := c.cc.Invoke(ctx, "/ledgerAPI.Block/getBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
type BlockServer interface {
	GetBlock(context.Context, *BlockRequest) (*BlockReply, error)
}

func RegisterBlockServer(s *grpc.Server, srv BlockServer) {
	s.RegisterService(&_Block_serviceDesc, srv)
}

func _Block_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledgerAPI.Block/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Block_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ledgerAPI.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlock",
			Handler:    _Block_GetBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledgerAPI.proto",
}
